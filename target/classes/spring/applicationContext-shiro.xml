<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd">

<!--    SSM集成shiro第二步 -->
<!--
    1.配置SecurityManager
    1.1.配置CacheManager
    1.2.session管理方式 (暂不需要)
    1.3.配置realm
-->
    <bean id="securityManager"
        class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <property name="realm" ref="jdbcRealm"/>
    </bean>

    <!--2.配置Encache-->
    <bean id="cacheManager"
          class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>
    <!--3.配置Realm 由SecurityManager用来访问安全数据（用户，角色等）。
        Shiro从Realm获取安全数据（如用户，角色，权限）
    -->
    <bean id="jdbcRealm"
          class="com.asura.realm.ShiroRealm">
<!--        配置这里的原因，猜测
            SimpleAuthenticationInfo info = new SimpleAuthenticationInfo(principal, credentials,salt, realmName);
            创建这个实例之前会访问她的加密算法和迭代次数
            测试，用md5的加密算法和使用1903次的迭代生成的密码
            如果没有一下的配置会显示密码错误
-->
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
<!--                加密算法名称-->
                <property name="hashAlgorithmName" value="MD5"/>
<!--                加密的次数-->
                <property name="hashIterations" value="1903"/>
            </bean>
        </property>
    </bean>


    <!-- =========================================================
        Shiro Spring特定的集成
         ========================================================= -->
    <!-- Spring 会为Shiro BEAN后置处理器。自动为Shiro bean调用init/destory方法-->
    <bean id="lifecycleBeanPostProcessor"
          class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
<!--    5.启动Spring，在Spring容器中使用Shiro注解，
        但前提是配置了DefaultAdvisorAutoProxyCreator-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
            depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
<!--
    6.配置shiroFilter
    6.1 id必须和web.xml中的shiorFilter一致-->
    <bean id="shiroFilter"
          class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.html"/>     <!--登录的URL-->
        <property name="successUrl" value="/index.html"/>   <!-- 成功的URL-->
        <property name="unauthorizedUrl" value="/authorized.html"/>     <!--未认证的URL-->
        <!-- key = value  以下方式不用手写 可以放在数据库中

                   资源URL = 拦截器名称

                   anon  （匿名）未认证可以访问的资源
                   authc  认证过滤器
                   logout 登出过滤器
                   roles[角色名称]
                   左侧的资源URL（
                   Ant风格
                       通配符	说明
                       ?	匹配任何单字符
                       *	匹配0或者任意数量的字符
                       **	匹配0或者更多的目录

                    声明优先原则

               <property name="filterChainDefinitions">
                   <value>
                       /list.html = anon
                       /login.html= anon
                       /shiro/login=anon
                       /shiro/logout= logout
                       /teacher.html=roles[tea]
                       /student.html=roles[stu]
                       /admin.jsp=roles[tea,stu]
                       /** = authc
                   </value>
               </property>
-->
<!--        通过查询数据库返回一个map类型来判断拦截的url和拦截类型-->
        <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"/>

    </bean>
<!--
       暂不理解下面的方式
       现在感觉都是在抄代码 ，不理解他们是如何实现的，应当加强文档学习
    Spring 注入：
        1.  属性注入set注入
        2.  构造器注入
        3.  工厂方式注入
      -->
<!--    2.工厂方式注入-->
    <bean id="filterChainDefinitionMap" factory-bean="filterChainDefinitionMapBuild" factory-method="build"/>
<!--    1，创建对应的bean-->
    <bean id="filterChainDefinitionMapBuild" class="com.asura.controller.shiro.FilterChainDefinitionMapBuild"/>
</beans>